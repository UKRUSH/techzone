// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// AUTH & USERS
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String // Hashed password
  role          UserRole  @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Loyalty & Profile
  loyaltyPoints Int       @default(0)
  loyaltyLevel  String    @default("Bronze") // Bronze, Silver, Gold
  addresses     Address[]
  reviews       Review[]
  orders        Order[]
  wishlist      Product[] @relation(fields: [wishlistProductIds], references: [id])
  wishlistProductIds String[] @db.ObjectId
  pcBuilds      PCBuild[]
  cartItems     CartItem[]
  
  // Security
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?

  // NextAuth specific
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  SALES_MANAGER
  WAREHOUSE_MANAGER
  CASHIER
  BUYER
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
}

// PRODUCTS & CATALOG
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[] // Array of image URLs
  manualUrl   String?  // URL to PDF manual/spec sheet
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  
  brand      Brand    @relation(fields: [brandId], references: [id])
  brandId    String   @db.ObjectId

  variants     ProductVariant[]
  reviews      Review[]
  versions     ProductVersion[]
  wishlistedBy User[]           @relation(fields: [wishlistedByIds], references: [id])
  wishlistedByIds String[]      @db.ObjectId
  orderItems   OrderItem[]      // Add relation to OrderItem
}

model ProductVariant {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  sku   String @unique
  price Float
  compareAtPrice Float? // Original price for discount calculation
  
  // Example attributes, can be JSON or separate fields
  attributes Json // e.g., {"color": "Black", "ram_size": "16GB"}
  
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  inventoryLevels Inventory[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
}

model Inventory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String  @db.ObjectId
  
  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @db.ObjectId

  stock     Int
  reserved  Int
  incoming  Int
  expiryDate DateTime? // For warranty/demo units
  
  @@unique([variantId, locationId])
}

model Location {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique // e.g., "Main Warehouse", "Downtown Branch"
  address   String
  inventory Inventory[]
}

model ProductVersion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  versionName String   // e.g., "v1.1", "2024 Revision"
  specs       Json     // Store specs snapshot as JSON
  changeLog   String
  createdAt   DateTime @default(now())
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String?   @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String?   @unique
  description String?
  logo        String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ORDERS & DELIVERY
model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  user            User?       @relation(fields: [userId], references: [id])
  userId          String?     @db.ObjectId
  
  // Order identification
  confirmationNumber String  @unique @default(cuid())
  
  // Customer information
  customerName    String
  customerEmail   String
  customerPhone   String
  
  // Shipping address (Sri Lankan format)
  shippingAddress   String
  shippingAddress2  String?
  shippingCity      String
  shippingDistrict  String  // Sri Lankan district instead of state
  shippingPostalCode String // Sri Lankan postal code instead of zipCode
  shippingCountry   String
  
  // Payment information
  paymentMethod     String
  paymentDetails    Json
  
  // Order totals
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  
  // Order status and tracking
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Order items and delivery
  orderItems      OrderItem[]
  delivery        Delivery?
}

model OrderItem {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String         @db.ObjectId
  product         Product?       @relation(fields: [productId], references: [id])
  productId       String?        @db.ObjectId
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
  variantId       String?        @db.ObjectId
  
  // Item details at time of purchase
  quantity        Int
  price           Float
  productName     String
  productDetails  Json?          // Store product info in case product gets deleted
  
  createdAt       DateTime       @default(now())
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

// CART
model CartItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String         @db.ObjectId
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId, variantId])
}

model Delivery {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  order              Order    @relation(fields: [orderId], references: [id])
  orderId            String   @unique @db.ObjectId
  agentName          String?  // Assigned delivery agent
  trackingNumber     String?
  deliveryNotes      String?
  confirmationProof  String?  // URL to image/signature
  shippedAt          DateTime?
  deliveredAt        DateTime?
}

// REVIEWS & INTERACTION
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int      // 1-5
  title     String
  text      String
  mediaUrls String[] // Photos/videos
  isVerifiedBuyer Boolean @default(false)
  createdAt DateTime @default(now())
}

// PC BUILDER
model PCBuild {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  name       String
  isPublic   Boolean  @default(false)
  components Json     // JSON object storing selected product variant IDs by category
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// PROMOTIONS
model Promotion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique // e.g., "SUMMER20"
  type        PromoType // COUPON, BUNDLE, SCHEDULED_DISCOUNT
  discount    Float     // Percentage or fixed amount
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  description String
}

enum PromoType {
  COUPON
  BUNDLE
  SCHEDULED_DISCOUNT
}

// SYSTEM & LOGS
model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  actorId   String   // Can be a user ID
  actorName String
  action    String   // e.g., "PRODUCT_CREATED", "STOCK_UPDATED"
  targetId  String   // e.g., the ID of the product that was created
  details   Json
  createdAt DateTime @default(now())
}
